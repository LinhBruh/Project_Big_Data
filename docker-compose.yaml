version: "3.8"

services:
  # ------------------ HADOOP ------------------
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    networks:
      - bigdata_network

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    restart: always
    ports:
      - "9864:9864"
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      - SERVICE_PRECONDITION=namenode:9870
      - NODE_NAME=datanode1
    env_file:
      - ./hadoop.env
    networks:
      - bigdata_network

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    restart: always
    ports:
      - "9865:9865"
    environment:
      - SERVICE_PRECONDITION=namenode:9870
      - NODE_NAME=datanode2
    env_file:
      - ./hadoop.env
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    networks:
      - bigdata_network
  
  datanode3:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode3
    restart: always
    ports:
      - "9866:9866"
    environment:
      - SERVICE_PRECONDITION=namenode:9870
      - NODE_NAME=datanode3
    env_file:
      - ./hadoop.env
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data
    networks:
      - bigdata_network

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9865 datanode3:9866"
    env_file:
      - ./hadoop.env
    networks:
      - bigdata_network


  # ------------------ MONGODB ------------------
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - bigdata_network

  # ------------------ KAFKA ------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - bigdata_network

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://host.docker.internal:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks:
      - bigdata_network
  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
      - "9095:9095"
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9094,PLAINTEXT_HOST://host.docker.internal:9095
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9094,PLAINTEXT_HOST://0.0.0.0:9095
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true

    networks:
      - bigdata_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka1
      - kafka2
    networks:
      - bigdata_network

  #-----------------SPARK----------------------------
  spark-master:
    build: 
      context: .
      dockerfile: Dockerfile.spark
    image: spark
    container_name: spark-master
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master --host spark-master --port 7077 --webui-port 8081
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
    ports:
      - "8081:8081"
      - "7077:7077"
    networks:
      - bigdata_network
    volumes:
      - ./scripts:/opt/spark-apps
  
  spark-worker-1:
    build: 
      context: .
      dockerfile: Dockerfile.spark
    image: spark
    container_name: spark-worker-1
    ports:
      - "8082:8082"
    depends_on:
      - spark-master
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077 --webui-port 8082
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_HOST=spark-master
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_LOCAL_DIRS=/tmp/spark-disk
    volumes:
      - ./spark-data-worker/spark-worker1-data:/tmp/spark-disk
    networks:
      - bigdata_network

  spark-worker-2:
    build: 
      context: .
      dockerfile: Dockerfile.spark
    image: spark
    container_name: spark-worker-2
    depends_on:
      - spark-master
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_MODE=worker
      - SPARK_MASTER_HOST=spark-master
      - SPARK_LOCAL_DIRS=/tmp/spark-disk
    volumes:
      - ./spark-data-worker/spark-worker2-data:/tmp/spark-disk
    networks:
      - bigdata_network
    
  spark-worker-3:
    build: 
      context: .
      dockerfile: Dockerfile.spark
    image: spark
    container_name: spark-worker-3
    depends_on:
      - spark-master
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_MODE=worker
      - SPARK_MASTER_HOST=spark-master
      - SPARK_LOCAL_DIRS=/tmp/spark-disk
    volumes:
      - ./spark-data-worker/spark-worker3-data:/tmp/spark-disk
    networks:
      - bigdata_network
    
#------------AIRFLOW--------------------
  airflow-postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bigdata_network
  
  airflow-webserver:
    image: apache/airflow:latest
    container_name: airflow-webserver
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=JV7dwyp4t-0t_Pe2H7Hy8tPldwPztCg0jiISJAoNVEU=
    ports:
      - "8085:8085"
    volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    depends_on:
      - airflow-postgres
    networks:
      - bigdata_network
    command: bash -c "airflow db init && airflow webserver -p 8085"
  
  airflow-scheduler:
    image: apache/airflow:latest
    container_name: airflow_scheduler
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=JV7dwyp4t-0t_Pe2H7Hy8tPldwPztCg0jiISJAoNVEU=
    depends_on:
      - airflow-postgres
    volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    networks:
      - bigdata_network
    command: scheduler



volumes:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:
  hadoop_historyserver:
  mongodb_data:
  postgres_data:

networks:
  bigdata_network:
    driver: bridge
